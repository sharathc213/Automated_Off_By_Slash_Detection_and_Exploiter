
function scan() {

    var output_path = $(".output_path").val();
    var url_file = $(".url_file").val();

  
    var status=true;

    var csrftoken = $("input[name=csrfmiddlewaretoken]").val();
    const txtExtensionRegex = /\.txt$/i;


 if(url_file==""){
    status=false;
    Message("please enter a URL File", 'Error', 'error');
 }
 if(output_path==""){
    status=false;
    Message("please enter a output path", 'Error', 'error');
 }
 if (!txtExtensionRegex.test(url_file) && url_file!="") {
   
    status=false;
    Message("Please enter the path of a .txt file", 'Error', 'error');

}



 var data={
    
    url_file:url_file,
    output_path:output_path,

   

    
 }

if(status){

    $.ajax({
        type: 'POST',
        url: '/scan',
        headers: {
            'X-CSRFToken': csrftoken
        },
        data:data,
        beforeSend: function() {
            $(".start_scan").prop("disabled", true);
            $(".stoped").hide();
            $(".running").show();
          
        },
        success: function (response) {
            if (response.hasOwnProperty('task_id')) {
                var taskId = response.task_id;
                CheckScanStatus(taskId);
            } else if (response.hasOwnProperty('error')) {
                $(".start_scan").prop("disabled", false);
                $(".stoped").show();
                $(".running").hide();
                Message(response.error, 'Error', 'error');
            }
        },
        error: function (xhr, status, error) {
            $(".start_scan").prop("disabled", false);
            $(".stoped").show();
            $(".running").hide();
       
          
            Message(error, 'Error', 'error');
        },
        dataType: 'json'
 
    });
}
}


function CheckScanStatus(taskId) {
    var csrftoken = $("input[name=csrfmiddlewaretoken]").val();

    $.ajax({
        type: 'GET',
        url: '/CheckScanStatus',
        data: {
            'task_id': taskId,
            'job':"get_scan"
        },
        headers: {
            'X-CSRFToken': csrftoken
        },
        success: function (response) {
            if (response.hasOwnProperty('status')) {
                var status = response.status;
                if (status === 'SUCCESS') {
                    Message('Scan Successfull', 'Success', 'success');  
                    $(".start_scan").prop("disabled", false);
                    $(".stoped").show();
                    $(".running").hide();
            $(".scan-wifi-spin").hide();
                } else if (status === 'FAILURE') {
                    $(".start_scan").prop("disabled", false);
                    $(".stoped").show();
                    $(".running").hide();
                    Message(response.traceback, 'Error', 'error');
                   
                } else {
                    setTimeout(function () {
                        CheckScanStatus(taskId);
                    }, 2000);
                }
            } else {
                setTimeout(function () {
                    CheckScanStatus(taskId);
                }, 2000);
            }
        },
        error: function (xhr, status, error) {
            $(".start_scan").prop("disabled", false);
            $(".stoped").show();
            $(".running").hide();
            Message(error, 'Error', 'error');
            // console.log(error);
            setTimeout(function () {
                CheckScanStatus(taskId);
            }, 2000);
        },
        dataType: 'json',

    });
}







    
//       </ul>
//     </div>
//   </div>
function escapeHtml(unsafe) {
    return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}



function worker(data){
var template='<div class="card"><div class="card-body"><h5 class="card-title">'
var template2=' <div class="card"><div class="card-body"><h5 class="card-title">Scan Result</h5><ul class="list-group list-group-flush">';
var template3='  </ul> </div></div>'
$.each(data, function(index, dict) {

if(dict.error==true){
    Message(dict.error_content, 'Error', 'error'); 
}
else {
    if(dict.from==="robbot"){
    if(dict.found){
        template+='Robbot.txt Found</h5><div class="accordion accordion-flush" id="accordionFlushExample">'
        template+='<div class="accordion-item">'
        template+='<h2 class="accordion-header" id="flush-headingOne">'
        template+=' <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">'
        template+='    Show Robot.txt Content'
        template+='  </button>'
        template+='  </h2>'
        template+=' <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">'
        template+='   <div class="accordion-body">'+dict.content+'</div>'
        template+=' </div>'
        template+='  </div></div></div></div>'
    }else{
        template+='Robbot.txt Not Found</h5>'
        template+=' </div>'
        template+='  </div>'
    }
}

else if(dict.from==="scanner"){
    
      if(dict.response==200){
        template2+='<li style="color:green" class="list-group-item">Found <a href="'+dict.link+'">'+dict.link+'</a> || '+escapeHtml(dict.payload)+'</li>'
      
      }else{
        template2+='<li style="color:orange" class="list-group-item">Found <a href="'+dict.link+'">'+dict.link+'</a> || '+escapeHtml(dict.payload)+'</li>'
      }

    }
   
    template2+='<li style="color:orange" class="list-group-item">'+dict.content+'</li>'
}  // Do whatever you want with the key-value pairs here


});
template=template+template2+template3;
$('.result').html(template);
}

var socket = new WebSocket('ws://localhost:8000/ws/output/')
socket.onmessage=function(event){
    var message=event.data;
    worker(JSON.parse(message));

}
